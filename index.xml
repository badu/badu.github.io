<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recency Bias</title>
    <link>http://badu.github.io/</link>
    <description>Recent content on Recency Bias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://badu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interview Questions for Go Developer Position - Part II</title>
      <link>http://badu.github.io/post/interviewing-go-developer-part-2/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/interviewing-go-developer-part-2/</guid>
      <description>Foreword See part 1.
Q: What will return the following code?
func returnNormal() int { i := 1 defer func() { i++ }() return i } func returnNamed() (i int) { i = 1 defer func() { i++ }() return i } func main() { fmt.Printf(&amp;quot;returnNormal() = %d\n&amp;quot;, returnNormal()) fmt.Printf(&amp;quot;returnNamed() = %d\n&amp;quot;, returnNamed()) }  A: returnNormal() = 1 and returnNamed() = 2 3 points
Q: What will print the following code?</description>
    </item>
    
    <item>
      <title>Changing Perspective</title>
      <link>http://badu.github.io/post/changing-perspective/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/changing-perspective/</guid>
      <description>Changing perspective Using abstractions is more about what your code can do. Encapsulation is about how we achieve that functionality.
Foreword &amp;ldquo;I was introduced to complex concepts almost immediately&amp;hellip; with examples I&amp;rsquo;d never use in real life. It confused me, I didn&amp;rsquo;t understand it, and eventually quit trying to learn Go because I thought I&amp;rsquo;d never get it&amp;rdquo; - quote from a beginner captured by Mat Ryer
The present writing is about concurrency and use of channels in Go.</description>
    </item>
    
    <item>
      <title>Interview Questions for Go Developer Position</title>
      <link>http://badu.github.io/post/interviewing-go-developer-part-1/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/interviewing-go-developer-part-1/</guid>
      <description>Foreword There is no such thing as essential interview questions. Despite the fact that I&amp;rsquo;m trying to help you, formulate questions and/or answers, I cannot help you point in the right direction, since each job has specific requirements and each person is unique.
My word of advising is don&amp;rsquo;t jump to conclusions, just because someone didn&amp;rsquo;t answer your question like you expected you to do. And there are people out there - myself included - who are able to explain you a concept without remembering the actual name or the acronym.</description>
    </item>
    
    <item>
      <title>What you can&#39;t do with reflect</title>
      <link>http://badu.github.io/post/what-you-cant-do/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/what-you-cant-do/</guid>
      <description>What&amp;rsquo;s the problem? A while ago, I was working on backend application in which we were trying to increase readability of the code, while defining a standard. In my morning explorations I&amp;rsquo;ve found a technique (sorry, can&amp;rsquo;t remember where : I&amp;rsquo;ll edit this article when I&amp;rsquo;ll remember) that allowed us to use reflection inside a before type handler, thus decoding JSON payloads would be agnostic to controllers.
A typical controller signature looks like this :</description>
    </item>
    
    <item>
      <title>Open Letter to You, My Recruiter</title>
      <link>http://badu.github.io/post/recruiters/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/recruiters/</guid>
      <description>Foreword So, you are my new connected-over-some-network-or-email-or-something recruiter.
What if I tell you that I posses recruiting skills? Understanding programmers and their psychology would be the first measure of a good IT recruiter, right ?
Telling a good programmer from a not-so-good one comes in measuring both his analytical skills and his human qualities.
I can totally understand that you might have no idea about programming skills, nor can we sustain a conversation regarding philosophical concepts about programming.</description>
    </item>
    
    <item>
      <title>Mirror Mirror on ...</title>
      <link>http://badu.github.io/post/mirror-mirror/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/mirror-mirror/</guid>
      <description>TL;DR While I was mentoring, I encouraged my pupils to break things so they understand how they work. Using reflect package seems easy, but understanding the mechanics is hard. So, this week, following my own advice, I&amp;rsquo;ve tried to create my own reflect package. Here is what I&amp;rsquo;ve learned.
Playing with Fire Most of the articles on the subject I&amp;rsquo;ve read have (more or less) the following advice : &amp;ldquo;if you find yourself doing this in a real program, stop immediately and seek help.</description>
    </item>
    
    <item>
      <title>Knowing when the world stops</title>
      <link>http://badu.github.io/post/known-world-stops/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/known-world-stops/</guid>
      <description>Last week, I took the time searching for patterns inside the main packages. Besides a bunch of aha moments, I&amp;rsquo;ve realized that some neat tricks can be used to achieve some goals otherwise achievable by applying different techniques.
For instance, let&amp;rsquo;s say you have a pool or a cache. How do you call your cleanup function?
Decisions regarding where to place that call can be made by testing and benchmarking.</description>
    </item>
    
    <item>
      <title>A Radix Story</title>
      <link>http://badu.github.io/post/radix-story/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/radix-story/</guid>
      <description>A Radix Story Yes, All You Need is Standard &amp;ldquo;net/http&amp;rdquo; There are, out there in the wild, an abundance of routers that a developer can use. In my opinion, one thing that they all share is the lack of separation of concerns. By separation of concerns I mean mixing handlers with routes and conditions, putting on top of that some cool optimized algorithm for looking up a route (or maybe I should say inspecting a string&amp;hellip;).</description>
    </item>
    
    <item>
      <title>My Thoughts On Net/Http Package - Week 2</title>
      <link>http://badu.github.io/post/net-http-week2/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/net-http-week2/</guid>
      <description>TL;DR This series is about my questions and thoughts regarding net/http package. The process of learning is based on mistakes, therefor I&amp;rsquo;m inviting you to learn aside me.
You are allowed to judge the code. You are not allowed to judge the people.
Part 1
ListenAndServe As you might well know, using http package is easy :
package main import ( &amp;quot;io&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;log&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/hello&amp;quot;, func (w http.</description>
    </item>
    
    <item>
      <title>My Thoughts On Net/Http Package - Week 1</title>
      <link>http://badu.github.io/post/net-http-week1/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/net-http-week1/</guid>
      <description>TL;DR This series is about my questions and thoughts regarding net/http package. The process of learning is based on mistakes, therefor I&amp;rsquo;m inviting you to learn aside me.
You are allowed to judge the code. You are not allowed to judge the people.
First Glance I have a confession to make : despite the fact that &amp;ldquo;Keep types close&amp;rdquo; rule is fair enough, the architect in me needs to reorganize the code in such a manner that a 10000 feet view to be possible.</description>
    </item>
    
    <item>
      <title>Comparing Go with Other Languages is Wrong</title>
      <link>http://badu.github.io/post/comparing-go-is-wrong/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/comparing-go-is-wrong/</guid>
      <description>TL;DR &amp;ldquo;Java is to Javascript like Car is to Carpet.&amp;rdquo; - Collective Genius
My Computer Language is Better than Yours Some programming languages were - let&amp;rsquo;s say - discovered over time, whereas others were created academically by carefully selecting the features that would provide solutions to a set of problems. Thereâ€™s nothing terribly new about spawning programming languages. However, haters gonna hate and will always find one, in an office near you or over the Internet.</description>
    </item>
    
    <item>
      <title>Why I Left Activemall</title>
      <link>http://badu.github.io/post/why-i-left-activemall/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/why-i-left-activemall/</guid>
      <description>TL;DR 10 things that require zero talent :
 being on time work ethic effort body language energy attitude passion being coach-able doing extra being prepared  Before Activemall It was 2015. I was leaving Altfactor because they split and in the process, they killed the most interesting project I&amp;rsquo;ve ever worked on.
That project was an awesome second screen smart TV application, that allowed the user to interact with a smart TV from a mobile device like a table or phone.</description>
    </item>
    
    <item>
      <title>Who is Bogdan?</title>
      <link>http://badu.github.io/about/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/about/</guid>
      <description>Skills | Experience | Education | History
Note for Recruiters For those of you that are trying to relocate me, please understand this is not the case. At least not for now. Please read this and F.A.Q. prior to contacting me. Thanks in advance!
Hello, my name is Bogdan and I am a Go language enthusiast. In case you want to skip to Go language skills, click here.
I&amp;rsquo;ve started to program computers in 1991.</description>
    </item>
    
    <item>
      <title>Why Recency Bias?</title>
      <link>http://badu.github.io/why-recency-bias/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/why-recency-bias/</guid>
      <description>The name of my blog came to me after reading this article. It&amp;rsquo;s defined as &amp;ldquo;Placing higher value on recent events than ones that occurred further in the past&amp;rdquo; by the author.
Looking on Wikipedia, you will not find the recency bias in the cognitive biases list. My best guess is because recency bias is related to learning and intelligence.
Yes, I find myself using the same design patterns over and over again.</description>
    </item>
    
  </channel>
</rss>