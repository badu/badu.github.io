<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Recency Bias</title>
    <link>http://badu.github.io/post/</link>
    <description>Recent content in Posts on Recency Bias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 08 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://badu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amice, ești impostor!</title>
      <link>http://badu.github.io/post/2021/18_01_2021/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/2021/18_01_2021/</guid>
      <description>În loc de bun rămas De fiecare dată când mă agață un recrutăr, îi povestesc despre valorile mele : people, project, payments. Mă văd în situația neplăcută în care părăsesc (iar) un proiect, la nici un an de la ultimul.
Știu, par mereu supărat, pe motive de perfecționism. Eu cred că sunt lucruri de bun simț, whatever that means these days.
Scriitura aceasta nu este un atac la persoană. Este despre o situație, despre un context.</description>
    </item>
    
    <item>
      <title>Anul 2020 și rezoluții pentru 2021</title>
      <link>http://badu.github.io/post/2020/2020/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/2020/2020/</guid>
      <description>Long story short Ca în anul ce-a trecut nu mi-am dorit niciodată atât de mult compasiune. De unde frate? A fost fiecare pentru el, ca de obicei în neamul ăsta de &amp;hellip; nici nu știu ce atribut i se potrivește pe primul loc (aș spune „hate-ri”, „oameni în split„). Fiecare pentru el a fost regula jocului.
Mă uit la rezoluțiile din 2019 și-mi dau seama că n-am făcut mai mult. Foarte probabil e că nici n-o să fac de aici înainte.</description>
    </item>
    
    <item>
      <title>Microservicii</title>
      <link>http://badu.github.io/post/2020/12_05_2020/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/2020/12_05_2020/</guid>
      <description>Acum doi ani, dacă mă întrebai ce părere am despre microservicii, îți voi fi răspuns că nu-mi place ideea. Asta pentru că am fost obișnuit cu monoliți bine construiți, în echipe relativ mici, pe care le „păzeam” de denaturare fiind foarte atent la direcția în care se mergea. După părerea mea - valabilă și azi - multe lucruri care se pot face în baza de date, ar trebui făcute în baza de date.</description>
    </item>
    
    <item>
      <title>Amice, ești idiot!</title>
      <link>http://badu.github.io/post/2020/21_01_2020/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/2020/21_01_2020/</guid>
      <description>În loc de „nu știu alții cum sunt”, eu știu foarte bine cum sunt alții. Unii sunt proști, alții tolerabili, iar alții sunt buni - mai buni decât mine. De la cei din urmă - adică cei mai buni - vreau să învăț, să nu fac greșelile pe care le-au făcut ei, care va să zică să fiu eficient. Pentru că eficiența este o parte integrantă a legii conservării energiei, drept pentru care a fi ineficient reprezintă - în capul meu - a fi împotriva curentului.</description>
    </item>
    
    <item>
      <title>Anul 2019 și rezoluții pentru 2020</title>
      <link>http://badu.github.io/post/2019/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/2019/</guid>
      <description>Câteodată spui ”ce repede trece timpul”, dar când te uiți în urmă îți dai seama că nu e chiar așa. Doo (nutrii) mii nouă spre zece a fost luuung și plin.
După cum cred că se vede, între deciziile din 2019 se numără și cea despre scrisul în limba engleză, aici pe blog. Nevermore. Română, că și-așa sunt plin plinuț de clișee în exprimare.
Noul job M-am adaptat relativ ușor noului job, deși privind în urmă eforturile și frustrările par mari.</description>
    </item>
    
    <item>
      <title>Interview Questions for Go Developer Position - Part II</title>
      <link>http://badu.github.io/post/interviewing-go-developer-part-2/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/interviewing-go-developer-part-2/</guid>
      <description>Foreword See part 1.
Q: What will return the following code?
func returnNormal() int { i := 1 defer func() { i++ }() return i } func returnNamed() (i int) { i = 1 defer func() { i++ }() return i } func main() { fmt.Printf(&amp;#34;returnNormal() = %d\n&amp;#34;, returnNormal()) fmt.Printf(&amp;#34;returnNamed() = %d\n&amp;#34;, returnNamed()) } A: returnNormal() = 1 and returnNamed() = 2 [3 points] (why : lazy evaluation)
 Q: What will print the following code?</description>
    </item>
    
    <item>
      <title>Changing Perspective</title>
      <link>http://badu.github.io/post/changing-perspective/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/changing-perspective/</guid>
      <description>Changing perspective Using abstractions is more about what your code can do. Encapsulation is about how we achieve that functionality.
Foreword &amp;ldquo;I was introduced to complex concepts almost immediately&amp;hellip; with examples I&amp;rsquo;d never use in real life. It confused me, I didn&amp;rsquo;t understand it, and eventually quit trying to learn Go because I thought I&amp;rsquo;d never get it&amp;rdquo; - quote from a beginner captured by Mat Ryer
The present writing is about concurrency and use of channels in Go.</description>
    </item>
    
    <item>
      <title>Interview Questions for Go Developer Position</title>
      <link>http://badu.github.io/post/interviewing-go-developer-part-1/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/interviewing-go-developer-part-1/</guid>
      <description>Foreword There is no such thing as essential interview questions. Despite the fact that I&amp;rsquo;m trying to help you, formulate questions and/or answers, I cannot help you point in the right direction, since each job has specific requirements and each person is unique.
My word of advising is don&amp;rsquo;t jump to conclusions, just because someone didn&amp;rsquo;t answer your question like you expected you to do. And there are people out there - myself included - who are able to explain you a concept without remembering the actual name or the acronym.</description>
    </item>
    
    <item>
      <title>What you can&#39;t do with reflect</title>
      <link>http://badu.github.io/post/what-you-cant-do/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/what-you-cant-do/</guid>
      <description>What&amp;rsquo;s the problem? A while ago, I was working on backend application in which we were trying to increase readability of the code, while defining a standard. In my morning explorations I&amp;rsquo;ve found a technique (sorry, can&amp;rsquo;t remember where : I&amp;rsquo;ll edit this article when I&amp;rsquo;ll remember) that allowed us to use reflection inside a before type handler, thus decoding JSON payloads would be agnostic to controllers.
A typical controller signature looks like this :</description>
    </item>
    
    <item>
      <title>Open Letter to You, My Recruiter</title>
      <link>http://badu.github.io/post/recruiters/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/recruiters/</guid>
      <description>Foreword So, you are my new connected-over-some-network-or-email-or-something recruiter.
What if I tell you that I posses recruiting skills? Understanding programmers and their psychology would be the first measure of a good IT recruiter, right ?
Telling a good programmer from a not-so-good one comes in measuring both his analytical skills and his human qualities.
I can totally understand that you might have no idea about programming skills, nor can we sustain a conversation regarding philosophical concepts about programming.</description>
    </item>
    
    <item>
      <title>Mirror Mirror on ...</title>
      <link>http://badu.github.io/post/mirror-mirror/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/mirror-mirror/</guid>
      <description>TL;DR While I was mentoring, I encouraged my pupils to break things so they understand how they work. Using reflect package seems easy, but understanding the mechanics is hard. So, this week, following my own advice, I&amp;rsquo;ve tried to create my own reflect package. Here is what I&amp;rsquo;ve learned.
Playing with Fire Most of the articles on the subject I&amp;rsquo;ve read have (more or less) the following advice : &amp;ldquo;if you find yourself doing this in a real program, stop immediately and seek help.</description>
    </item>
    
    <item>
      <title>Knowing when the world stops</title>
      <link>http://badu.github.io/post/known-world-stops/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/known-world-stops/</guid>
      <description>Last week, I took the time searching for patterns inside the main packages. Besides a bunch of aha moments, I&amp;rsquo;ve realized that some neat tricks can be used to achieve some goals otherwise achievable by applying different techniques.
For instance, let&amp;rsquo;s say you have a pool or a cache. How do you call your cleanup function?
Decisions regarding where to place that call can be made by testing and benchmarking. But what if there is another neat way to do so : just before the garbage collection runs, you can mount yourself a function and receive a call on it.</description>
    </item>
    
    <item>
      <title>A Radix Story</title>
      <link>http://badu.github.io/post/radix-story/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/radix-story/</guid>
      <description>A Radix Story Yes, All You Need is Standard &amp;ldquo;net/http&amp;rdquo; There are, out there in the wild, an abundance of routers that a developer can use. In my opinion, one thing that they all share is the lack of separation of concerns. By separation of concerns I mean mixing handlers with routes and conditions, putting on top of that some cool optimized algorithm for looking up a route (or maybe I should say inspecting a string&amp;hellip;).</description>
    </item>
    
    <item>
      <title>My Thoughts On Net/Http Package - Week 2</title>
      <link>http://badu.github.io/post/net-http-week2/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/net-http-week2/</guid>
      <description>TL;DR This series is about my questions and thoughts regarding net/http package. The process of learning is based on mistakes, therefor I&amp;rsquo;m inviting you to learn aside me.
You are allowed to judge the code. You are not allowed to judge the people.
Part 1
ListenAndServe As you might well know, using http package is easy :
package main import ( &amp;#34;io&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;log&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/hello&amp;#34;, func (w http.</description>
    </item>
    
    <item>
      <title>My Thoughts On Net/Http Package - Week 1</title>
      <link>http://badu.github.io/post/net-http-week1/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://badu.github.io/post/net-http-week1/</guid>
      <description>TL;DR This series is about my questions and thoughts regarding net/http package. The process of learning is based on mistakes, therefor I&amp;rsquo;m inviting you to learn aside me.
You are allowed to judge the code. You are not allowed to judge the people.
First Glance I have a confession to make : despite the fact that &amp;ldquo;Keep types close&amp;rdquo; rule is fair enough, the architect in me needs to reorganize the code in such a manner that a 10000 feet view to be possible.</description>
    </item>
    
  </channel>
</rss>
